# This was generated by the following steps:

# redir > filename.txt
# silent verbose map
# redir END

# then doing a search and replace on the output to massage the output to fit.

harleypig    \lc         * :lclose<CR>
harleypig    \lo         * :Errors<CR>
harleypig    [m            :call search('\v^\s*sub\s*\w+\s*(\(\s*.{-}\s*\))?\s*\{', 'bW')<CR>
harleypig    ]m            :call search('\v^\s*sub\s*\w+\s*(\(\s*.{-}\s*\))?\s*\{', 'W')<CR>
harleypig n  .           * .`[
harleypig n  \b            :ls<CR>:buffer<Space>
harleypig n  >>          * :call ShiftLine()<CR>
harleypig n  <C-L>       * :nohlsearch<CR><C-L>
harleypig n  \ml         * :call AppendModeline()<CR>
harleypig n  \nn         * :set <C-R>={'00':'','01':'r','10':'nor'}[&rnu.&nu]<CR>nu<CR>
harleypig n  \pt           :call Perltidy_diff()<CR>
harleypig n  \ptidy        :call Perltidy_file()<CR>
harleypig n  S             :%s//g<Left><Left>
harleypig n  \y            : if exists("syntax_on") | syntax off | else | syntax enable | endif<CR>
harleypig    \O            :<C-U>call append(line(".") -1, repeat([''], v:count1))<CR>
harleypig    \o            :<C-U>call append(line("."), repeat([''], v:count1))<CR>
harleypig    \pI          @:call IntroduceTemporaryVariable()<CR>
harleypig    \pL          @:call RenameVariable()<CR>
harleypig    \pp          @:call EditorToolsMenu()<CR>
harleypig    \pP          @:call RenamePackageFromPath()<CR>
harleypig    \stw          :call StripTrailingWhitespace()<CR>
harleypig v  <F2>        * d:execute 'normal i' . join(sort(split(getreg('"'))), ' ')<CR>"'))))'
harleypig v  S             :s//g<Left><Left>
harleypig    Y             y$

align    \abox         <Plug>AM_abox
align    \acom         <Plug>AM_acom
align    \adcom        <Plug>AM_adcom
align    \adec         <Plug>AM_adec
align    \adef         <Plug>AM_adef
align    \aenum        <Plug>AM_aenum
align    \afnc         <Plug>AM_afnc
align    \anum         <Plug>AM_aunum
align    \aocom        <Plug>AM_aocom
align    \a<           <Plug>AM_a<
align    \a=           <Plug>AM_a=
align    \a,           <Plug>AM_a,
align    \a?           <Plug>AM_a?
align    \a(           <Plug>AM_a(
align    \ascom        <Plug>AM_ascom
align    \aunum        <Plug>AM_aunum
align    \Htd          <Plug>AM_Htd
align    \m=           <Plug>AM_m=
align n  <SNR>17_WE    <Plug>AlignMapsWrapperEnd
align    \rwp          <Plug>RestoreWinPosn
align    <SNR>17_WS    <Plug>AlignMapsWrapperStart
align    \swp          <Plug>SaveWinPosn
align    \tab          <Plug>AM_tab
align    \Tab          <Plug>AM_Tab
align    \tml          <Plug>AM_tml
align    \t~           <Plug>AM_t~
align    \t<           <Plug>AM_t<
align    \t=           <Plug>AM_t=
align    \t|           <Plug>AM_t|
align    \t,           <Plug>AM_t,
align    \t;           <Plug>AM_t;
align    \t:           <Plug>AM_t:
align    \t?           <Plug>AM_t?
align    \t@           <Plug>AM_t@
align    \t#           <Plug>AM_t#
align    \T~           <Plug>AM_T~
align    \T<           <Plug>AM_T<
align    \T=           <Plug>AM_T=
align    \T|           <Plug>AM_T|
align    \T;           <Plug>AM_T;
align    \T:           <Plug>AM_T:
align    \T?           <Plug>AM_T?
align    \T@           <Plug>AM_T@
align    \T#           <Plug>AM_T#
align    \T,           <Plug>AM_T,o
align    \ts<          <Plug>AM_ts<
align    \ts=          <Plug>AM_ts=
align    \ts,          <Plug>AM_ts,
align    \ts;          <Plug>AM_ts;
align    \ts:          <Plug>AM_ts:
align    \Ts,          <Plug>AM_Ts,
align    \tsp          <Plug>AM_tsp
align    \Tsp          <Plug>AM_Tsp
align    \tsq          <Plug>AM_tsq
align    \tt           <Plug>AM_tt
align    \tW@          <Plug>AM_tW@
align    \TW@          <Plug>AM_TW@
align    \w=           <Plug>AM_w=

autoclose x  \a`         *@<Esc>`>a`<Esc>`<i`<Esc>
autoclose x  \a'         *@<Esc>`>a'<Esc>`<i'<Esc>
autoclose x  \a"         *@<Esc>`>a"<Esc>`<i"<Esc>
autoclose x  \a(         *@<Esc>`>a)<Esc>`<i(<Esc>
autoclose x  \a)         *@<Esc>`>a)<Esc>`<i(<Esc>
autoclose x  \a[         *@<Esc>`>a]<Esc>`<i[<Esc>
autoclose x  \a]         *@<Esc>`>a]<Esc>`<i[<Esc>
autoclose x  \a{         *@<Esc>`>a}<Esc>`<i{<Esc>
autoclose x  \a}         *@<Esc>`>a}<Esc>`<i{<Esc>

indent-guides n  \ig           <Plug>IndentGuidesToggle

matchit n  %           * :<C-U>call <SNR>29_Match_wrapper('',1,'n') <CR>
matchit n  [%          * :<C-U>call <SNR>29_MultiMatch("bW", "n") <CR>
matchit n  ]%          * :<C-U>call <SNR>29_MultiMatch("W",  "n") <CR>
matchit n  g%          * :<C-U>call <SNR>29_Match_wrapper('',0,'n') <CR>
matchit o  g%          * v:<C-U>call <SNR>29_Match_wrapper('',0,'o') <CR>
matchit o  %           * v:<C-U>call <SNR>29_Match_wrapper('',1,'o') <CR>
matchit o  [%          * v:<C-U>call <SNR>29_MultiMatch("bW", "o") <CR>
matchit o  ]%          * v:<C-U>call <SNR>29_MultiMatch("W",  "o") <CR>
matchit v  a%            <Esc>[%v]%
matchit v  %           * :<C-U>call <SNR>29_Match_wrapper('',1,'v') <CR>m'gv``
matchit v  [%            <Esc>[%m'gv``
matchit v  ]%            <Esc>]%m'gv``
matchit v  g%          * :<C-U>call <SNR>29_Match_wrapper('',0,'v') <CR>m'gv``

spacehi    <F3>          :ToggleSpaceHi<CR>

surround n  cs            <Plug>Csurround
surround n  ds            <Plug>Dsurround
surround n  ys            <Plug>Ysurround
surround n  yS            <Plug>YSurround
surround n  yss           <Plug>Yssurround
surround n  ySs           <Plug>YSsurround
surround n  ySS           <Plug>YSsurround
surround x  gS            <Plug>VgSurround

unimpaired n  [A            <Plug>unimpairedAFirst
unimpaired n  ]A            <Plug>unimpairedALast
unimpaired n  ]a            <Plug>unimpairedANext
unimpaired n  [a            <Plug>unimpairedAPrevious
unimpaired n  [B            <Plug>unimpairedBFirst
unimpaired n  ]B            <Plug>unimpairedBLast
unimpaired n  ]b            <Plug>unimpairedBNext
unimpaired n  [b            <Plug>unimpairedBPrevious
unimpaired n  ]<C-L>        <Plug>unimpairedLNFile
unimpaired n  [<C-L>        <Plug>unimpairedLPFile
unimpaired n  cob         * :set background=<C-R>=&background == 'dark' ? 'light' : 'dark'<CR><CR>
unimpaired n  coc         * :set <C-R>=<SNR>51_toggle("cursorline")<CR><CR>
unimpaired n  cod         * :<C-R>=&diff ? 'diffoff' : 'diffthis'<CR><CR>
unimpaired n  coh         * :set <C-R>=<SNR>51_toggle("hlsearch")<CR><CR>
unimpaired n  coi         * :set <C-R>=<SNR>51_toggle("ignorecase")<CR><CR>
unimpaired n  col         * :set <C-R>=<SNR>51_toggle("list")<CR><CR>
unimpaired n  con         * :set <C-R>=<SNR>51_toggle("number")<CR><CR>
unimpaired n  cor         * :set <C-R>=<SNR>51_toggle("relativenumber")<CR><CR>
unimpaired n  cos         * :set <C-R>=<SNR>51_toggle("spell")<CR><CR>
unimpaired n  cou         * :set <C-R>=<SNR>51_toggle("cursorcolumn")<CR><CR>
unimpaired n  cov         * :set <C-R>=(&virtualedit =~# "all") ? 'virtualedit-=all' : 'virtualedit+=all'<CR><CR>
unimpaired n  cow         * :set <C-R>=<SNR>51_toggle("wrap")<CR><CR>
unimpaired n  cox         * :set <C-R>=&cursorline && &cursorcolumn ? 'nocursorline nocursorcolumn' : 'cursorline cursorcolumn'<CR><CR>
unimpaired n  ]<C-Q>        <Plug>unimpairedQNFile
unimpaired n  [<C-Q>        <Plug>unimpairedQPFile
unimpaired n  ]e            <Plug>unimpairedMoveDown
unimpaired n  [e            <Plug>unimpairedMoveUp
unimpaired n  ]f            <Plug>unimpairedDirectoryNext
unimpaired n  [f            <Plug>unimpairedDirectoryPrevious
unimpaired n  [L            <Plug>unimpairedLFirst
unimpaired n  ]L            <Plug>unimpairedLLast
unimpaired n  ]l            <Plug>unimpairedLNext
unimpaired n  [l            <Plug>unimpairedLPrevious
unimpaired n  ]n            <Plug>unimpairedContextNext
unimpaired n  [n            <Plug>unimpairedContextPrevious
unimpaired n  ]ob         * :set background=dark<CR>
unimpaired n  [ob         * :set background=light<CR>
unimpaired n  [oc         * :set cursorline<CR>
unimpaired n  ]oc         * :set nocursorline<CR>
unimpaired n  ]od         * :diffoff<CR>
unimpaired n  [od         * :diffthis<CR>
unimpaired n  [oh         * :set hlsearch<CR>
unimpaired n  ]oh         * :set nohlsearch<CR>
unimpaired n  [oi         * :set ignorecase<CR>
unimpaired n  ]oi         * :set noignorecase<CR>
unimpaired n  [ol         * :set list<CR>
unimpaired n  ]ol         * :set nolist<CR>
unimpaired n  ]on         * :set nonumber<CR>
unimpaired n  [on         * :set number<CR>
unimpaired n  ]o            <Plug>unimpairedONext
unimpaired n  [o            <Plug>unimpairedOPrevious
unimpaired n  ]or         * :set norelativenumber<CR>
unimpaired n  [or         * :set relativenumber<CR>
unimpaired n  ]os         * :set nospell<CR>
unimpaired n  [os         * :set spell<CR>
unimpaired n  [ou         * :set cursorcolumn<CR>
unimpaired n  ]ou         * :set nocursorcolumn<CR>
unimpaired n  [ov         * :set virtualedit+=all<CR>
unimpaired n  ]ov         * :set virtualedit-=all<CR>
unimpaired n  ]ow         * :set nowrap<CR>
unimpaired n  [ow         * :set wrap<CR>
unimpaired n  [ox         * :set cursorline cursorcolumn<CR>
unimpaired n  ]ox         * :set nocursorline nocursorcolumn<CR>
unimpaired n  <p          * :call <SNR>51_putline(']p')<CR><']
unimpaired n  =p          * :call <SNR>51_putline(']p')<CR>=']
unimpaired n  >p          * :call <SNR>51_putline(']p')<CR>>']
unimpaired n  <P          * :call <SNR>51_putline('[p')<CR><']
unimpaired n  =P          * :call <SNR>51_putline('[p')<CR>=']
unimpaired n  >P          * :call <SNR>51_putline('[p')<CR>>']
unimpaired n  [p            <Plug>unimpairedPutAbove
unimpaired n  ]p            <Plug>unimpairedPutBelow
unimpaired n  [Q            <Plug>unimpairedQFirst
unimpaired n  ]Q            <Plug>unimpairedQLast
unimpaired n  ]q            <Plug>unimpairedQNext
unimpaired n  [q            <Plug>unimpairedQPrevious
unimpaired n  ]<Space>      <Plug>unimpairedBlankDown
unimpaired n  [<Space>      <Plug>unimpairedBlankUp
unimpaired n  [T            <Plug>unimpairedTFirst
unimpaired n  ]T            <Plug>unimpairedTLast
unimpaired n  ]t            <Plug>unimpairedTNext
unimpaired n  [t            <Plug>unimpairedTPrevious
unimpaired n  ]u            <Plug>unimpaired_url_decode
unimpaired n  [u            <Plug>unimpaired_url_encode
unimpaired n  ]uu           <Plug>unimpaired_line_url_decode
unimpaired n  [uu           <Plug>unimpaired_line_url_encode
unimpaired n  ]x            <Plug>unimpaired_xml_decode
unimpaired n  [x            <Plug>unimpaired_xml_encode
unimpaired n  ]xx           <Plug>unimpaired_line_xml_decode
unimpaired n  [xx           <Plug>unimpaired_line_xml_encode
unimpaired n  yo          * :call <SNR>51_setup_paste()<CR>o
unimpaired n  yO          * :call <SNR>51_setup_paste()<CR>O
unimpaired n  ]y            <Plug>unimpaired_string_decode
unimpaired n  [y            <Plug>unimpaired_string_encode
unimpaired n  ]yy           <Plug>unimpaired_line_string_decode
unimpaired n  [yy           <Plug>unimpaired_line_string_encode
unimpaired o  ]n            <Plug>unimpairedContextNext
unimpaired o  [n            <Plug>unimpairedContextPrevious
unimpaired x  ]e            <Plug>unimpairedMoveSelectionDown
unimpaired x  [e            <Plug>unimpairedMoveSelectionUp
unimpaired x  ]u            <Plug>unimpaired_url_decode
unimpaired x  [u            <Plug>unimpaired_url_encode
unimpaired x  ]x            <Plug>unimpaired_xml_decode
unimpaired x  [x            <Plug>unimpaired_xml_encode
unimpaired x  ]y            <Plug>unimpaired_string_decode
unimpaired x  [y            <Plug>unimpaired_string_encode

vcscommand n  \ca           <Plug>VCSAdd
vcscommand n  \cc           <Plug>VCSCommit
vcscommand n  \cD           <Plug>VCSDelete
vcscommand n  \cd           <Plug>VCSDiff
vcscommand n  \ce           :call <SNR>53_ExecuteExtensionMapping('e')<CR>
vcscommand n  \cE           :call <SNR>53_ExecuteExtensionMapping('E')<CR>
vcscommand n  \cG           <Plug>VCSClearAndGotoOriginal
vcscommand n  \cg           <Plug>VCSGotoOriginal
vcscommand n  \ci           <Plug>VCSInfo
vcscommand n  \cL           <Plug>VCSLock
vcscommand n  \cl           <Plug>VCSLog
vcscommand n  \cn           <Plug>VCSAnnotate
vcscommand n  \cN           <Plug>VCSSplitAnnotate
vcscommand n  \cq           <Plug>VCSRevert
vcscommand n  \cr           <Plug>VCSReview
vcscommand n  \cs           <Plug>VCSStatus
vcscommand n  \ct           :call <SNR>53_ExecuteExtensionMapping('t')<CR>
vcscommand n  \cU           <Plug>VCSUnlock
vcscommand n  \cu           <Plug>VCSUpdate
vcscommand n  \cv           <Plug>VCSVimDiff
vcscommand n  \cwa          :call <SNR>53_ExecuteExtensionMapping('wa')<CR>
vcscommand n  \cwf          :call <SNR>53_ExecuteExtensionMapping('wf')<CR>
vcscommand n  \cwn          :call <SNR>53_ExecuteExtensionMapping('wn')<CR>
vcscommand n  \cwr          :call <SNR>53_ExecuteExtensionMapping('wr')<CR>
vcscommand n  \cwv          :call <SNR>53_ExecuteExtensionMapping('wv')<CR>

vim-commentary n  cgc           <Plug>ChangeCommentary
vim-commentary n  \\            :echomsg '\\ is deprecated. Use gc'<CR><Plug>Commentary
vim-commentary n  gcc           <Plug>CommentaryLine
vim-commentary n  gc            <Plug>Commentary
vim-commentary n  gcu           <Plug>Commentary<Plug>Commentary
vim-commentary n  <Plug>ChangeCommentary * c:<C-U>call <SNR>59_textobject(1)<CR>
vim-commentary n  <Plug>Commentary * :<C-U>set opfunc=<SNR>59_go<CR>g@
vim-commentary n  <Plug>CommentaryLine * :<C-U>set opfunc=<SNR>59_go|exe 'norm! 'v:count1.'g@_'<CR>
vim-commentary n  \\\           <Plug>CommentaryLine:echomsg '\\ is deprecated. Use gc'<CR>
vim-commentary n  <Plug>CommentaryUndo   <Plug>Commentary<Plug>Commentary
vim-commentary n  \\u           <Plug>CommentaryUndo:echomsg '\\ is deprecated. Use gc'<CR>
vim-commentary o  gc            <Plug>Commentary
vim-commentary o  <Plug>Commentary * :<C-U>call <SNR>59_textobject(0)<CR>
vim-commentary x  gc            <Plug>Commentary
vim-commentary x  <Plug>Commentary * :<C-U>call <SNR>59_go(line("'<"),line("'>"))<CR>
vim-commentary x  \\            <Plug>Commentary:echomsg '\\ is deprecated. Use gc'<CR>

vim-signify n  ]c            <Plug>(signify-next-hunk)
vim-signify n  [c            <Plug>(signify-prev-hunk)
vim-signify n  \gh           <Plug>(signify-toggle-highlight)
vim-signify n  \gj           <Plug>(signify-next-hunk)
vim-signify n  \gk           <Plug>(signify-prev-hunk)
vim-signify n  \gt           <Plug>(signify-toggle)

vimwiki n  \w\i          <Plug>VimwikiDiaryGenerateLinks
vimwiki n  \wi           <Plug>VimwikiDiaryIndex
vimwiki n  \ws           <Plug>VimwikiUISelect
vimwiki n  \wt           <Plug>VimwikiTabIndex
vimwiki n  \w\t          <Plug>VimwikiTabMakeDiaryNote
vimwiki n  \ww           <Plug>VimwikiIndex
vimwiki n  \w\w          <Plug>VimwikiMakeDiaryNote

bundled n  gx            <Plug>NetrwBrowseX
bundled v  ,gq           :s/\s\+/ /g<CR>gvgq
bundled n  ,gq           :%s/\s\+/ /g<CR>gq1G
bundled v  _j            :call Justify('tw',4)<CR>
bundled n  _j            :%call Justify('tw',4)<CR>
